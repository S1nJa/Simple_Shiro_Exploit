package core;

import entity.ControllersFactory;
import org.apache.shiro.subject.SimplePrincipalCollection;
import ui.MainController;
import utils.HttpUtils;
import utils.createAESCBCCipher;
import utils.createAESGCMCipher;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.Map;

public class ShiroKeyDetect {

    final private MainController myController = (MainController) ControllersFactory.controllers.get(MainController.class.getSimpleName());
    public static boolean isShiro(String url) {
        boolean flag = false;
        String header = HttpUtils.getHeader(url, "test");
        if (header.contains("deleteMe")){
            flag = true;
        }
        return flag;
    }

    public Map<String, String> keysCrack(String url) throws Exception {
        String key;
        String mode = null;
        SimplePrincipalCollection simplePrincipalCollection = new SimplePrincipalCollection();
        InputStream resource = ShiroKeyDetect.class.getClassLoader().getResourceAsStream("shirokey.txt");
        InputStreamReader isr = new InputStreamReader(resource);
        BufferedReader br = new BufferedReader(isr);
        while ((key=br.readLine())!=null){
            String cookieCBC = createAESCBCCipher.encrypt(key, simplePrincipalCollection);
            String cookieGMC = createAESGCMCipher.encrypt(key, simplePrincipalCollection);

            String resCBC = HttpUtils.getHeader(url, cookieCBC);
            String resGMC = HttpUtils.getHeader(url, cookieGMC);
            if (!resCBC.contains("deleteMe")){
                mode = "CBC";
                this.myController.result.appendText("[*]加密方式AES-"+mode+"\n");
                this.myController.result.appendText("[*]"+key+"\n");
                break;
            } else if (!resGMC.contains("deleteMe")) {
                mode = "GMC";
                this.myController.result.appendText("[*]加密方式AES-"+mode);
                this.myController.result.appendText("[*]"+key+"\n");
                break;
            } else {
                this.myController.result.appendText("[-]"+key+"\n");
            }

        }
        HashMap<String, String> map = new HashMap<>();
        map.put("key",key);
        map.put("mode",mode);
        return map;
    }

}
